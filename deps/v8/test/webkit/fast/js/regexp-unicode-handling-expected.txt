# Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Test for proper handling of Unicode RegExps and bug 7445: Gmail puts wrong subject in replies.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS cy('Re: Moose') is 'Moose'
PASS cy('\u8f6c\u53d1: Moose') is 'Moose'
PASS inlineRe.source is newFromInlineRe.source
PASS inlineRe.source is evalFromInlineRe.source
PASS inlineRe.source is evalInlineRe.source
PASS inlineRe.source is newFromEvalInlineRe.source
PASS inlineRe.source is evalFromEvalInlineRe.source
PASS inlineRe.source is explicitRe.source
PASS inlineRe.source is newFromExplicitRe.source
PASS inlineRe.source is evalFromExplicitRe.source
PASS inlineRe.toString() is newFromInlineRe.toString()
PASS inlineRe.toString() is evalFromInlineRe.toString()
PASS inlineRe.toString() is evalInlineRe.toString()
PASS inlineRe.toString() is newFromEvalInlineRe.toString()
PASS inlineRe.toString() is evalFromEvalInlineRe.toString()
PASS inlineRe.toString() is explicitRe.toString()
PASS inlineRe.toString() is newFromExplicitRe.toString()
PASS inlineRe.toString() is evalFromExplicitRe.toString()
PASS inlineRe.exec(sample)[0] is 'bm⠠p'
PASS evalInlineRe.exec(sample)[0] is 'bm⠠p'
PASS explicitRe.exec(sample)[0] is 'bm⠠p'
PASS binlineRe.source is bnewFromInlineRe.source
PASS binlineRe.source is bevalFromInlineRe.source
PASS binlineRe.source is bevalInlineRe.source
PASS binlineRe.source is bnewFromEvalInlineRe.source
PASS binlineRe.source is bevalFromEvalInlineRe.source
PASS binlineRe.source is bexplicitRe.source
PASS binlineRe.source is bnewFromExplicitRe.source
PASS binlineRe.source is bevalFromExplicitRe.source
PASS binlineRe.toString() is bnewFromInlineRe.toString()
PASS binlineRe.toString() is bevalFromInlineRe.toString()
PASS binlineRe.toString() is bevalInlineRe.toString()
PASS binlineRe.toString() is bnewFromEvalInlineRe.toString()
PASS binlineRe.toString() is bevalFromEvalInlineRe.toString()
PASS binlineRe.toString() is bexplicitRe.toString()
PASS binlineRe.toString() is bnewFromExplicitRe.toString()
PASS binlineRe.toString() is bevalFromExplicitRe.toString()
PASS binlineRe.exec(bsample)[0] is 'bm|p'
PASS bevalInlineRe.exec(bsample)[0] is 'bm|p'
PASS bexplicitRe.exec(bsample)[0] is 'bm|p'
PASS successfullyParsed is true

TEST COMPLETE

