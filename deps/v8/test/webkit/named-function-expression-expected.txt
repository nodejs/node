# Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Tests variable resolution rules for named function expressions.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


anonymous function expression
PASS var x = (function(a,b){ return a + b; }); x(1,2) is 3
named function expression
PASS var x = (function Named(a,b){ return a + b; }); x(2,3) is 5
eval'd code should be able to access scoped variables
PASS var z = 6; var x = eval('(function(a,b){ return a + b + z; })'); x(3,4) is 13
eval'd code + self-check
PASS var z = 10; var x = eval('(function Named(a,b){ return (!!Named) ? (a + b + z) : -999; })'); x(4,5) is 19
named function expressions are not saved in the current context
PASS (function Foo(){ return 1; }); try { Foo(); throw "FuncExpr was stored"; } catch(e) { if(typeof(e)=="string") throw e; } 1 is 1
recursion is possible, though
PASS var ctr = 3; var x = (function Named(a,b){ if(--ctr) return 2 * Named(a,b); else return a + b; }); x(5,6) is 44
regression test where kjs regarded an anonymous function declaration (which is illegal) as a FunctionExpr
PASS var hadError = 0; try { eval("function(){ return 2; };"); } catch(e) { hadError = 1; }; hadError; is 1

-----

PASS: (function closure() { return closure == arguments.callee && !this.closure; })() should be true and is.
PASS: (function closure() { closure = 1; return closure == arguments.callee && !this.closure; })() should be true and is.
PASS: (function closure(closure) { return closure == 1 && !this.closure; })(1) should be true and is.
PASS: (function closure() { var closure = 1; return closure == 1 && !this.closure; })() should be true and is.
PASS: (function closure() { function closure() { }; return closure != arguments.callee && !this.closure; })() should be true and is.
PASS: (function closure() { return (function() { return closure && !this.closure; })(); })() should be true and is.
PASS: (function closure() { return (function() { closure = null; return closure && !this.closure; })(); })() should be true and is.
PASS: (function closure() { return (function() { return closure && !this.closure; }); })()() should be true and is.
PASS: (function closure() { return (function() { closure = null; return closure && !this.closure; }); })()() should be true and is.
PASS: (function closure() { eval("var closure"); return closure == undefined && !this.closure; })() should be true and is.
PASS: (function closure() { eval("function closure() { }"); return closure != arguments.callee && !this.closure; })() should be true and is.
PASS: (function closure() { eval("var closure;"); closure = 1; return closure == 1 && !this.closure; })() should be true and is.
PASS: (function closure() { eval("var closure"); delete closure; return closure == arguments.callee && !this.closure; })() should be true and is.
PASS: (function closure() { eval("function closure() { }"); delete closure; return closure == arguments.callee && !this.closure; })() should be true and is.
PASS: (function closure() { eval("closure = 1;"); return closure == arguments.callee && !this.closure; })() should be true and is.
PASS successfullyParsed is true

TEST COMPLETE

