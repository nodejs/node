# Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This test checks whether various seal/freeze/preventExtentions work on a regular object.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS (new inextensible).prototypeExists is true
PASS (new sealed).prototypeExists is true
PASS (new frozen).prototypeExists is true
PASS test(obj()) is "(b:4)(c:3)E"
PASS test(preventExtensions(obj())) is "(b:4)"
PASS test(seal(obj())) is "(a:1)(b:4)S"
PASS test(freeze(obj())) is "(a:1)(b:2)SF"
PASS Object.preventExtensions(Math.sin) is Math.sin
PASS var o = {}; Object.preventExtensions(o); o.__proto__ = { newProp: "Should not see this" }; o.newProp; threw exception TypeError: #<Object> is not extensible.
PASS "use strict"; var o = {}; Object.preventExtensions(o); o.__proto__ = { newProp: "Should not see this" }; o.newProp; threw exception TypeError: #<Object> is not extensible.
PASS Object.preventExtensions(Math); Math.sqrt(4) is 2
PASS var arr = Object.preventExtensions([]); arr[0] = 42; arr[0] is undefined.
PASS var arr = Object.preventExtensions([]); arr[0] = 42; arr.length is 0
PASS "use strict"; var arr = Object.preventExtensions([]); arr[0] = 42; arr[0] threw exception TypeError: Cannot add property 0, object is not extensible.
PASS obj.foo is 1
PASS Object.isFrozen(func) is true
PASS func.prototype === 42 is false
PASS Object.getOwnPropertyDescriptor(func, "prototype").writable is false
PASS Object.isFrozen(strictFunc) is true
PASS strictFunc.prototype === 42 is false
PASS Object.getOwnPropertyDescriptor(strictFunc, "prototype").writable is false
PASS Object.isFrozen(array) is true
PASS array[0] is 0
PASS Object.getOwnPropertyDescriptor(array, "length").writable is false
PASS Object.isFrozen(args) is true
PASS args[0] is 0
PASS Object.getOwnPropertyDescriptor(args, "length").writable is false
PASS Object.getOwnPropertyDescriptor(args, "callee").writable is false
PASS preventExtensionsFreezeIsFrozen(function foo(){}) is true
PASS preventExtensionsFreezeIsFrozen(function foo(){ "use strict"; }) is true
PASS preventExtensionsFreezeIsFrozen([0,1,2]) is true
PASS preventExtensionsFreezeIsFrozen((function(){ return arguments; })(0,1,2)) is true
PASS Object.getOwnPropertyDescriptor(freeze({0:0}), 0).configurable is false
PASS Object.getOwnPropertyDescriptor(freeze({10000001:0}), 10000001).configurable is false
PASS successfullyParsed is true

TEST COMPLETE

